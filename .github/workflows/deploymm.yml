name: Gradle CI/CD to AWS ECR

on:
  push:
    branches: [ "dev" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant permission to gradlew
        run: chmod +x ./gradlew

      - name: Build api & adapter
        run: ./gradlew :api:build :adapter:build -x test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 528782700548.dkr.ecr.ap-northeast-2.amazonaws.com

      - name: Build Docker images
        run: |
          docker build -t rento-api -f api/Dockerfile ./api
          docker build -t rento-adapter -f adapter/Dockerfile ./adapter

      - name: Tag & Push Docker images
        run: |
          docker tag rento-api:latest ${{ secrets.ECR_REPO_API }}:latest
          docker push ${{ secrets.ECR_REPO_API }}:latest

          docker tag rento-adapter:latest ${{ secrets.ECR_REPO_ADAPTER }}:latest
          docker push ${{ secrets.ECR_REPO_ADAPTER }}:latest

      - name: Deploy on EC2
        run: |
          echo "${{ secrets.EC2_KEY }}" | base64 -d > ec2.pem
          chmod 600 ec2.pem

          ssh -o StrictHostKeyChecking=no -i ec2.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            # 공통 설정
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}

            # firebase 디렉토리 및 파일 설정
            mkdir -p /home/ubuntu/firebase
            echo '${{ secrets.FIREBASE_CONFIG }}' > /home/ubuntu/firebase/rento-firebase.json

            # ECR 로그인
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 528782700548.dkr.ecr.ap-northeast-2.amazonaws.com

            # rento-api 배포
            docker stop rento-api || true && docker rm rento-api || true
            docker pull ${{ secrets.ECR_REPO_API }}:latest
            docker run -d --name rento-api \
              --network mynet \
              -p 80:8080 \
              -v /home/ubuntu/firebase:/app/firebase \
              -e SPRING_PROFILES_ACTIVE=deploy \
              -e FIREBASE_PATH="/app/firebase/rento-firebase.json" \
              ${{ secrets.ECR_REPO_API }}:latest

            # rento-adapter 배포
            docker stop rento-adapter || true && docker rm rento-adapter || true
            docker pull ${{ secrets.ECR_REPO_ADAPTER }}:latest
            docker run -d --name rento-adapter \
              --network mynet \
              -p 81:8080 \
              -e SPRING_PROFILES_ACTIVE=deploy \
              ${{ secrets.ECR_REPO_ADAPTER }}:latest
          EOF