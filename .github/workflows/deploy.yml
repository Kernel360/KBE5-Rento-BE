name: Rento Multi-Module CI/CD to EC2

on:
  push:
    branches: [ "dev" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant permission to gradlew
        run: chmod +x ./gradlew

      - name: Build all modules
        run: ./gradlew clean build -x test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-northeast-2 | \
            docker login --username AWS --password-stdin 528782700548.dkr.ecr.ap-northeast-2.amazonaws.com

      # ───── Build and Push rento-api ─────
      - name: Build Docker image for rento-api
        run: docker build -t rento-api ./rento-api

      - name: Tag and Push rento-api
        run: |
          docker tag rento-api:latest ${{ secrets.ECR_REPOSITORY_API }}:latest
          docker push ${{ secrets.ECR_REPOSITORY_API }}:latest

      # ───── Build and Push rento-adapter ─────
      - name: Build Docker image for rento-adapter
        run: docker build -t rento-adapter ./rento-adapter

      - name: Tag and Push rento-adapter
        run: |
          docker tag rento-adapter:latest ${{ secrets.ECR_REPOSITORY_ADAPTER }}:latest
          docker push ${{ secrets.ECR_REPOSITORY_ADAPTER }}:latest

      # ───── Deploy rento-api on EC2 (Instance 1) ─────
      - name: Deploy rento-api on EC2
        run: |
          echo "${{ secrets.EC2_KEY }}" | base64 -d > ec2.pem
          chmod 600 ec2.pem
      
          ssh -o StrictHostKeyChecking=no -i ec2.pem ubuntu@${{ secrets.EC2_HOST_API }} << EOF
            export DB_HOST="${{ secrets.DB_HOST }}"
            export DB_PORT="${{ secrets.DB_PORT }}"
            export DB_NAME="${{ secrets.DB_NAME }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASS="${{ secrets.DB_PASS }}"
            export AES_KEY="${{ secrets.AES_KEY }}"
            export JWT_KEY="${{ secrets.JWT_KEY }}"
            export REDIS_HOST="${{ secrets.REDIS_HOST }}"
            export REDIS_PORT="${{ secrets.REDIS_PORT }}"
            export RABBITMQ_HOST="${{ secrets.RABBITMQ_HOST }}"
            export RABBITMQ_PORT="${{ secrets.RABBITMQ_PORT }}"
            export RABBITMQ_USER_NAME="${{ secrets.RABBITMQ_USER_NAME }}"
            export RABBITMQ_PASSWORD="${{ secrets.RABBITMQ_PASSWORD }}"
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      
            mkdir -p /home/ubuntu/firebase
            echo '${{ secrets.FIREBASE_CONFIG }}' > /home/ubuntu/firebase/rento-firebase.json
      
            aws ecr get-login-password --region ap-northeast-2 | \
              docker login --username AWS --password-stdin 528782700548.dkr.ecr.ap-northeast-2.amazonaws.com
      
            docker stop rento-api || true
            docker rm rento-api || true
            docker pull ${{ secrets.ECR_REPOSITORY_API }}:latest
            docker run -d \
              --name rento-api \
              --network mynet \
              --log-driver json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              -p 8080:8080 \
              -v /home/ubuntu/firebase:/app/firebase \
              -v /home/ubuntu/log/api:/app/log/api \
              -e SPRING_PROFILES_ACTIVE=deploy \
              -e FIREBASE_PATH="/app/firebase/rento-firebase.json" \
              -e DB_HOST="\$DB_HOST" -e DB_PORT="\$DB_PORT" \
              -e DB_NAME="\$DB_NAME" -e DB_USER="\$DB_USER" -e DB_PASS="\$DB_PASS" \
              -e REDIS_HOST="\$REDIS_HOST" -e REDIS_PORT="\$REDIS_PORT" \
              -e RABBITMQ_HOST="${{ secrets.RABBITMQ_HOST }}" \
              -e RABBITMQ_PORT="${{ secrets.RABBITMQ_PORT }}" \
              -e RABBITMQ_USER_NAME="${{ secrets.RABBITMQ_USER_NAME }}" \
              -e RABBITMQ_PASSWORD="${{ secrets.RABBITMQ_PASSWORD }}" \
              -e AES_KEY="${{ secrets.AES_KEY }}" \
              -e JWT_KEY="${{ secrets.JWT_KEY }}" \
              ${{ secrets.ECR_REPOSITORY_API }}:latest
      
            docker image prune -f
          EOF

  # ───── Deploy rento-adapter on EC2 (Instance 2) ─────
      - name: Deploy rento-adapter on second EC2
        run: |
          echo "${{ secrets.EC2_KEY }}" | base64 -d > ec2.pem
          chmod 600 ec2.pem
        
          ssh -o StrictHostKeyChecking=no -i ec2.pem ubuntu@${{ secrets.EC2_HOST_ADAPTER }} << EOF
            export DB_HOST="${{ secrets.DB_HOST }}"
            export DB_PORT="${{ secrets.DB_PORT }}"
            export DB_NAME="${{ secrets.DB_NAME }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASS="${{ secrets.DB_PASS }}"
            export AES_KEY="${{ secrets.AES_KEY }}"
            export JWT_KEY="${{ secrets.JWT_KEY }}"
            export REDIS_HOST="${{ secrets.REDIS_HOST }}"
            export REDIS_PORT="${{ secrets.REDIS_PORT }}"
            export RABBITMQ_HOST="${{ secrets.RABBITMQ_HOST }}"
            export RABBITMQ_PORT="${{ secrets.RABBITMQ_PORT }}"
            export RABBITMQ_USER_NAME="${{ secrets.RABBITMQ_USER_NAME }}"
            export RABBITMQ_PASSWORD="${{ secrets.RABBITMQ_PASSWORD }}"
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        
            mkdir -p /home/ubuntu/firebase
            echo '${{ secrets.FIREBASE_CONFIG }}' > /home/ubuntu/firebase/rento-firebase.json
        
            aws ecr get-login-password --region ap-northeast-2 | \
              docker login --username AWS --password-stdin 528782700548.dkr.ecr.ap-northeast-2.amazonaws.com
        
            docker stop rento-adapter || true
            docker rm rento-adapter || true
            docker pull ${{ secrets.ECR_REPOSITORY_ADAPTER }}:latest
            docker run -d \
              --name rento-adapter \
              --network mynet \
              --log-driver json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              -p 8080:8080 \
              -v /home/ubuntu/firebase:/app/firebase \
              -v /home/ubuntu/log/adapter:/app/log/adapter \
              -e SPRING_PROFILES_ACTIVE=deploy \
              -e FIREBASE_PATH="/app/firebase/rento-firebase.json" \
              -e DB_HOST="\$DB_HOST" -e DB_PORT="\$DB_PORT" \
              -e DB_NAME="\$DB_NAME" -e DB_USER="\$DB_USER" -e DB_PASS="\$DB_PASS" \
              -e REDIS_HOST="\$REDIS_HOST" -e REDIS_PORT="\$REDIS_PORT" \
              -e RABBITMQ_HOST="${{ secrets.RABBITMQ_HOST }}" \
              -e RABBITMQ_PORT="${{ secrets.RABBITMQ_PORT }}" \
              -e RABBITMQ_USER_NAME="${{ secrets.RABBITMQ_USER_NAME }}" \
              -e RABBITMQ_PASSWORD="${{ secrets.RABBITMQ_PASSWORD }}" \
              -e AES_KEY="${{ secrets.AES_KEY }}" \
              -e JWT_KEY="${{ secrets.JWT_KEY }}" \
              ${{ secrets.ECR_REPOSITORY_ADAPTER }}:latest
        
            docker image prune -f
          EOF
