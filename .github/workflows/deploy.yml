name: Gradle CI/CD to AWS ECR

on:
  push:
    branches: [ "dev" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant permission to gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 528782700548.dkr.ecr.ap-northeast-2.amazonaws.com

      - name: Build Docker image
        run: docker build -t rento-server .

      - name: Tag Docker image
        run: docker tag rento-server:latest ${{ secrets.ECR_REPOSITORY }}:latest

      - name: Push to Amazon ECR
        run: docker push ${{ secrets.ECR_REPOSITORY }}:latest

      - name: Setup EC2 SSH Key
        run: |
          echo "${{ secrets.EC2_KEY }}" | base64 -d > ec2.pem
          chmod 600 ec2.pem

      - name: Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            sudo docker stop rento-server || true
            sudo docker rm rento-server || true
            sudo docker pull ${{ secrets.ECR_REPOSITORY }}:latest
            sudo docker run -d --name rento-server -p 8080:8080 ${{ secrets.ECR_REPOSITORY }}:latest
          EOF
