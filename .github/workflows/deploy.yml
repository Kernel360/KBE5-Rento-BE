name: Gradle CI/CD to AWS ECR

on:
  push:
    branches: [ "dev" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant permission to gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 528782700548.dkr.ecr.ap-northeast-2.amazonaws.com

      - name: Build Docker image
        run: docker build -t rento-server .

      - name: Tag Docker image
        run: docker tag rento-server:latest ${{ secrets.ECR_REPOSITORY }}:latest

      - name: Push to Amazon ECR
        run: docker push ${{ secrets.ECR_REPOSITORY }}:latest

      - name: Deploy on EC2
        run: |
          echo "${{ secrets.EC2_KEY }}" | base64 -d > ec2.pem
          chmod 600 ec2.pem

          ssh -o StrictHostKeyChecking=no -i ec2.pem ubuntu@${{ secrets.EC2_HOST }} << EOF
            export DB_HOST="${{ secrets.DB_HOST }}"
            export DB_PORT="${{ secrets.DB_PORT }}"
            export DB_NAME="${{ secrets.DB_NAME }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASS="${{ secrets.DB_PASS }}"

            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}

            # firebase 디렉토리 없으면 생성 (절대 경로 사용)
            mkdir -p /home/ubuntu/firebase

            # firebase config 파일 생성 (절대 경로 사용)
            echo '${{ secrets.FIREBASE_CONFIG }}' > /home/ubuntu/firebase/rento-f1d61-firebase-adminsdk-fbsvc-bd76cc388d.json

            aws ecr get-login-password --region ap-northeast-2 | \
              docker login --username AWS --password-stdin 528782700548.dkr.ecr.ap-northeast-2.amazonaws.com

            docker stop rento-server || true
            docker rm rento-server || true
            docker pull 528782700548.dkr.ecr.ap-northeast-2.amazonaws.com/rento-server:latest

            docker run -d \
              --name rento-server \
              --network mynet \
              -p 80:8080 \
              -v /home/ubuntu/firebase:/app/firebase \
              -e DB_HOST="\$DB_HOST" \
              -e DB_PORT="\$DB_PORT" \
              -e DB_NAME="\$DB_NAME" \
              -e DB_USER="\$DB_USER" \
              -e DB_PASS="\$DB_PASS" \
              -e REDIS_HOST="${{ secrets.REDIS_HOST }}" \
              -e REDIS_PORT="${{ secrets.REDIS_PORT }}" \
              -e SPRING_PROFILES_ACTIVE=deploy \
              -e FIREBASE_PATH="/app/firebase/rento-f1d61-firebase-adminsdk-fbsvc-bd76cc388d.json" \
              528782700548.dkr.ecr.ap-northeast-2.amazonaws.com/rento-server:latest
          EOF
